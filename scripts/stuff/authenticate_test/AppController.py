#
#
# DO NOT EDIT THIS FILE.
# This file was autogenerated by python_on_wheels.
# Any manual edits may be overwritten without notification.
#
# 

# date created:     2011-06-21

import sys
import os


sys.path.append( os.path.abspath(os.path.join( os.path.dirname(os.path.abspath(__file__)), "../../../stubs/lib" )))
sys.path.append( os.path.abspath(os.path.join( os.path.dirname(os.path.abspath(__file__)), "../../../stubs/models" )))
sys.path.append( os.path.abspath(os.path.join( os.path.dirname(os.path.abspath(__file__)), "../../../stubs/models/powmodels" )))
sys.path.append( os.path.abspath(os.path.join( os.path.dirname(os.path.abspath(__file__)), "../../../stubs/controllers" )) )

import powlib
from powlib import mixin, uc
from BaseController import BaseController
import datetime

from auth import AuthController 


class AppController(object):
    
    def __init__(self):
        # it is needed to set a Modelname before calling the BaseControllers init
        #self.modelname = "App"
        #BaseController.__init__(self)
        
        #AuthController.login_required = { "welcome" : "admin" }
        self.login_required = { "welcome" : "admin" }
        # example of locked actions and the redirections.
        self.locked_actions = {}
        AuthController.protect(self)
    
    def ajax( self, powdict ):
        print "AJAX-Request"
        now = datetime.datetime.now()
        now = now.strftime("%Y-%m-%d %H:%M:%S")
        ret_str = uc("""<div class="alert alert-success">
                <button type="button" class="close" data-dismiss="alert">&times;</button>
                <strong>Yeah! AJAX with python rocks totally now:</strong>&nbsp %s &nbsp; %s 
              </div>""" % (now, powdict["REQ_BODY"] ))
        
        
        return ret_str 
        
    
    def welcome( self, powdict ):
        #example of setting a special_template for an action not following the Controller_action.tmpl convention
        #return self.render(special_tmpl="hero.tmpl",model=self.model, powdict=powdict)
        print "welcome"
        
    def thanks( self ):
        print "Das ist die thanks action"
        
    def howto_start( self,powdict ):
        return self.render(model=self.model, powdict=powdict)
    
class B(object):   
    def __init__(self):
        print "init"
        self.an_attribute = "hallo"
    
    def a_method(self):
        print "a method" 

    
if __name__ == "__main__":
    a = AppController()
    AuthController.protect(a)
    a.thanks()
    a.welcome("admin")
    b = B()
    print b.__dict__.items() 
    for k,v in b.__dict__.iteritems():
        print k,v
    