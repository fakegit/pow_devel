
import sys,os,datetime
import string
import types
import urllib
from sqlalchemy import orm
import sqlalchemy.sql
import logging
from sqlalchemy.orm import relationship, backref
from sqlalchemy import Column, Integer, ForeignKey, DDL
from sqlalchemy.schema import CreateTable

# the libraries
sys.path.append( os.path.abspath(os.path.join( os.path.dirname(os.path.abspath(__file__)), "../../lib" )))
# the models
sys.path.append( os.path.abspath(os.path.join( os.path.dirname(os.path.abspath(__file__)), "../" )))
# the generators
sys.path.append( os.path.abspath(os.path.join( os.path.dirname(os.path.abspath(__file__)), "../../" )))
import powlib
from PowBaseObject import PowBaseObject
import generate_model
import pdb

class #BASECLASSNAME(object):

    def __init__(self, parent):
        """ initialize this model """
        #self.properties_list = #PROPERTIES_LIST
        #self.parent = parent
      
        #self.__table__ = Table('posts', self.pbo.getMetaData(), autoload=True)
        #self.generate_accessor_methods()
        #self.t = self.parent.__table__
        #self.setup_properties()
        
        #self.__mapper_args__ = {}
        #self.__mapper__.add_properties({'posts': relationship(con.model.__mapper__)})
    
    def find(self):
        res = self.session.query(self.parent.__class__)
        return res
    
    def find_all(self):
        res = self.session.query(self.parent.__class__)
        return res
    
    def find_by(self, *args, **kwargs):
        print "args = ",args
        #print "kwargs = ", kwargs
        res = self.find()
        res = res.filter(*args)
        if kwargs.has_key("first"):
            if kwargs["first"] == False:
                return res
        return res.first()
    
    def setup_properties(self):
        """ sets up the properties of this model.
            mainly one way of relationships is handled this way.
            see:  http://docs.sqlalchemy.org/en/rel_0_7/orm/mapper_config.html. 
            search: Mapper.add_property() on the page """
        #pdb.set_trace()
        for elem in self.properties_list:
            modelname = string.capitalize(powlib.singularize(elem))
            rel_model = powlib.load_class(modelname, modelname)
            #self.__mapper__.add_properties({ elem : relationship(rel_model.__mapper__) })
            self.__mapper__.add_properties({ elem : relationship(rel_model) })
            #setattr(self, elem, relationship(modelname))
        
    def set_parent(self, object):
        self.parent = object
        self.t = self.parent.__table__
        self.properties_list = #PROPERTIES_LIST
        self.setup_properties()
        return
    
    def get_columns(self):
        return self.parent.__table__.columns
    
    def get_column_names(self):
        return self.parent.__table__.columns.keys()
    
    def get_name(self):
        return self.parent.__class__.__name__
        
    def get_column_type(self, column):
        curr_type = type(self.t.columns[column].type)
        return curr_type
    
    def generate_accessor_methods(self):
        #
        """generates the convenient getAttribute() and setAttribute Methods
        and sets them as accessors for this models Attributes """
        mstr = ""
        self.has_accessor_methods = True
        for item in self.parent.__table__.columns:
            #getter
            mstr = ""
            method_name = "get_"+ item.name
            setter = method_name
            tmp_meth_name = "foo"
            mstr +=     "def foo(self):" + powlib.newline
            mstr += powlib.tab + "return self." + str(item.name) + powlib.newline
            #print mstr
            exec(mstr)
            self.parent.__dict__[method_name] = types.MethodType(foo,self.parent)
            
            
            # setter
            mstr = ""
            method_name = "set_"+ item.name
            getter = method_name
            tmp_meth_name = "foo"
            mstr +=     "def foo(self, value):" + powlib.newline
            mstr += powlib.tab + "self." + str(item.name) + " = value " + powlib.newline
            #print mstr
            exec(mstr)
            self.parent.__dict__[method_name] = types.MethodType(foo,self.parent)
            
            #cmd_str = "self.__table__." + item + "=property(" + getter + "," + setter + ")"
            #eval(cmd_str)
            
    
    def set(self, name, value):
        setattr(self.parent, name, value)
        return
    
    def get(self, name):
        return getattr(self, name)

    def update(self):
        """ updates this record """
        dt = datetime.datetime.strftime(datetime.datetime.now(),"%Y-%m-%d %H:%M:%S")
        dt = urllib.unquote(dt)
        self.set("last_updated", dt)
        self.session.merge(self)
        self.session.commit()

    def create(self):
        """ adds a new record to the db """
        dt = datetime.datetime.strftime(datetime.datetime.now(),"%Y-%m-%d %H:%M:%S")
        #dt = urllib.unquote(dt)
        self.set("created", dt)
        self.set("last_updated", dt)
        self.session.merge(self)
        self.session.commit()

    def delete(self):
        """ deletes this record """
        s = sqlalchemy.sql.delete(self.__table__, self.__table__.columns.id==self.id)
        self.session.execute(s)
        self.session.commit()

    @orm.reconstructor
    def init_on_load(self):
        """ is called by sqlalchemy before a new instance is created """
        self.__init__()

    def belongs_to(self,rel_table):
        """ Description:
                Creates the foreign_key for the table relation. 
                Remark: The old table is dropped. 
            input parameters:    
                @param rel_table (type:string) Name of the table to be related.
                                                lowercase, singular. comment.belongs_to("post")
        """
        #
        # Now creating the foreign_key
        #
        fkey = powlib.pluralize(string.lower(rel_table)) + ".id"
        if fkey in self.__table__.foreign_keys:
            err_msg = " already has a belongs_to relation to table "
            print "Table ", self.__table__.name, err_msg , rel_table
            raise StandardError( "Table " + self.__table__.name +  err_msg +  rel_table)
        else:
            fkey = ""
            #cons = ForeignKeyConstraint([table.c.fkey], [othertable.c.id])
            modelname = string.capitalize(rel_table)
            #print " -- loading model: ", modelname
            rel_model = powlib.load_class(modelname, modelname)
            #col = rel_model.getColumn(self.__table__.name + "_id")
            #print rel_model.getColumns()
            #print str(CreateTable(rel_model.__table__))
            self.__table__.append_column(
                        #Column(rel_model.__table__.name + "_id", Integer, 
                        Column(rel_table + "_id", Integer, 
                        ForeignKey(rel_model.__table__.name +".id"))
                    )
            cts = str(CreateTable(self.__table__))
            create_table_ddl = DDL(cts)    
            print cts
            self.__table__.drop()
            self.pbo.getConnection().execute(create_table_ddl)
        return

    def release_belongs_to(self,rel_table):
        return

    def release_has_many(self,rel_table, prefix_path="./"):
        """
            removes a has_many relation between self and the given model.
            @param  rel_table:  string, 
        """
        if rel_table in self.properties_list:
            # remove relation from the instance
            self.properties_list.remove(rel_table)
            print "properties_list after release_has_many:" , self.properties_list 
            mod = powlib.load_module( "generate_model" )
            # daclaration of render_model: 
            #   def render_model(modelname, force, comment, properties=None, nomig=False):
            # remove relation from the persistent model
            mod.render_model( str.lower(self.modelname), True, "", prefix_path, str(self.properties_list) )
        else:
            print "Model: ", self.modelname, " has no has_many relation to ", rel_table
        return


    def has_many(self,rel_table, prefix_path="./"):
        """ Description:
                Creates the relation property in the model class text definition.                  
            input parameters:    
                rel_table     (type:string) pluralized Name of the table to be related.
                prefix_path   (type:string) The new model code will be generated into
                                            prefix_path/models/ 
                example:        Post.has_many("comments")
        """
        ### has_many property is the plural form of the modelname
        #modelname = string.capitalize(powlib.singularize(rel_table))
        #rel_model = powlib.load_class(modelname, modelname)
        #self.__mapper__.add_properties({rel_table: relationship(rel_model.__mapper__)})
        #generate_model.render_model(modelname, noforce, comment, properties=None):
        #return
        if rel_table in self.properties_list:
            print "Model: ", self.modelname, " already has a has_many relation to ", rel_table
            return
        else:
            self.properties_list.append(rel_table)
            mod = powlib.load_module( "generate_model" )
            # daclaration of render_model: def render_model(modelname, force, comment, properties=None, nomig=False):
            mod.render_model( str.lower(self.get_name()), True, "", prefix_path, str(self.properties_list))
            #def render_model(modelname, force, comment, prefix_path, properties=None):
            self.setup_properties()
            return

    def new_has_many(self,rel_table, prefix_path="./"):
        """ Description:
            Creates the foreign_key for the table relation. 
            Remark: The old table is dropped. 
            input parameters:    
            @param rel_table (type:string) Name of the table to be related.
                lowercase, singular. comment.belongs_to("post")
        """
        #
        # Now creating the foreign_key
        #
        
        fkey = powlib.singularize(string.lower(self.__table__.name)) + ".id"
        fkey_modelname = string.capitalize(powlib.singularize(rel_table))
        print "loading model: %s" % (fkey_modelname )
        fkey_model = powlib.load_class(fkey_modelname, fkey_modelname)
        
        print "set foreign_key in table %s " % (rel_table)
        fkey_model.belongs_to(powlib.singularize(self.t.name))
                
        if rel_table in self.properties_list:
            print "Model: ", self.modelname, " already has a has_many relation to ", rel_table
            return
        else:
            self.properties_list.append(rel_table)
            mod = powlib.load_module( "generate_model" )
            # daclaration of render_model: def render_model(modelname, force, comment, properties=None, nomig=False):
            mod.render_model( str.lower(self.get_name()), True, "", prefix_path, str(self.properties_list))
            #def render_model(modelname, force, comment, prefix_path, properties=None):
            self.__mapper__.add_properties({ rel_table : relationship(fkey_model.__mapper__) })
            #self.setup_properties()
            return
        
        raise StandardError( "You should never see this message in a model.relation. model.has_many()")
        
if __name__ == "__main__":
    pass

